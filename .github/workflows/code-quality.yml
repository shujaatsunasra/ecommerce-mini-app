name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 1' # Weekly on Monday

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Check code formatting
      run: dart format --output=none --set-exit-if-changed .
      
    - name: Analyze code
      run: flutter analyze --fatal-infos
      
    - name: Check for unused dependencies
      run: flutter pub deps --json | jq '.packages | keys | map(select(. | startswith("ecommerce_mini_app") | not)) | .[]' | xargs -I {} flutter pub deps --json | jq '.packages | keys | map(select(. | startswith("ecommerce_mini_app") | not)) | .[]' | sort | uniq
      
    - name: Run linter
      run: dart run flutter_lints
      
    - name: Check for security issues
      run: |
        echo "Checking for hardcoded secrets..."
        if grep -r "password\|secret\|key\|token" lib/ --include="*.dart" | grep -v "// TODO\|// FIXME\|// NOTE"; then
          echo "❌ Potential hardcoded secrets found!"
          exit 1
        else
          echo "✅ No hardcoded secrets found"
        fi

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Check for outdated dependencies
      run: flutter pub outdated
      
    - name: Run dependency audit
      run: |
        echo "Checking for vulnerable dependencies..."
        flutter pub deps --json | jq '.packages | to_entries | map(select(.value.dependency | contains("direct"))) | .[] | .key' | sort | uniq

  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Build for analysis
      run: flutter build apk --debug
      
    - name: Analyze APK size
      run: |
        echo "APK size analysis:"
        ls -lh build/app/outputs/flutter-apk/app-debug.apk
        echo "APK size: $(stat -c%s build/app/outputs/flutter-apk/app-debug.apk) bytes"
        
    - name: Check for large files
      run: |
        echo "Checking for large files in the project..."
        find . -name "*.dart" -exec wc -c {} + | sort -nr | head -10
        echo "Checking for large assets..."
        find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.svg" | xargs ls -lh | sort -k5 -hr | head -10

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        output: 'trivy-results.txt'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: trivy-results.txt
        
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const results = fs.readFileSync('trivy-results.txt', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔒 Security Scan Results\n\`\`\`\n${results}\n\`\`\``
          });

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run tests with coverage
      run: flutter test --coverage
      
    - name: Generate coverage report
      run: |
        # Install lcov if not available
        sudo apt-get update
        sudo apt-get install -y lcov
        
        # Generate HTML coverage report
        genhtml coverage/lcov.info -o coverage/html
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/html/
        
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const lcov = fs.readFileSync('coverage/lcov.info', 'utf8');
          
          // Parse coverage percentage
          const lines = lcov.split('\n');
          let totalLines = 0;
          let coveredLines = 0;
          
          for (const line of lines) {
            if (line.startsWith('LF:')) {
              totalLines += parseInt(line.split(':')[1]);
            } else if (line.startsWith('LH:')) {
              coveredLines += parseInt(line.split(':')[1]);
            }
          }
          
          const coverage = totalLines > 0 ? ((coveredLines / totalLines) * 100).toFixed(2) : 0;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 📊 Test Coverage Report\n\n**Coverage: ${coverage}%**\n\n- Total lines: ${totalLines}\n- Covered lines: ${coveredLines}\n- Uncovered lines: ${totalLines - coveredLines}\n\nCoverage report is available in the artifacts.`
          });